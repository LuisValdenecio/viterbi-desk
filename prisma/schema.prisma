// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plan {
  enterprise
  professional
  free
}

enum Subscription_period {
  monthly
  yearly
}

enum Task_priority {
  high
  medium
  low
}

enum Role {
  owner
  admin
  reader
}

model Team {
  team_id String @id @default(cuid())
  name String @db.VarChar(255)
  channels Channel[]
  member_invitation Member_invitation[]
  status String @default("functioning")
  description String @db.VarChar(500)
  person User? @relation(fields: [user_id], references: [user_id] , onDelete: Cascade, onUpdate : Cascade)
  user_id String
  user_previlege User_privilege[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model User_privilege {
  id String @id @default(cuid())
  status String
  user User? @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate : Cascade)
  team Team? @relation(fields: [team_id], references: [team_id], onDelete: Cascade, onUpdate: Cascade)
  role Role
  task_quota Int @default(0) 
  daily_playground_quota Int @default(0) // change the name to just playground_quota
  used_task_quota Int @default(0)
  used_daily_playground_quota Int @default(0) // change the name to just playground_quota
  user_id String 
  team_id String 
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model User {
  user_id String @id @default(cuid())
  name String @db.VarChar(255)
  img String? @db.VarChar(255)
  email String @unique
  password String 
  teams Team[]
  tasks Task[]
  agents Agent[]
  member_invitation Member_invitation[]

  plan Plan @default(free)
  customerId String? @unique // Stripe customer ID, this will be important when we need to delete the subscription

  invitation_info Invitation_info[]
  channels Channel[]
  user_privilege User_privilege[]
  Stripe_sub Stripe_subscription?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Stripe_subscription {
  id String @id @default(cuid())
  user User? @relation(fields: [user_id], references: [user_id] , onDelete: Cascade, onUpdate : Cascade)
  plan Plan
  user_id String @unique
  period Subscription_period

  startDate DateTime @default(now())
  endDate DateTime

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Member_invitation {
  id String @id @default(cuid())
  guest_email String
  invitation_info Invitation_info[]
  invitation_link Invitation_link[]
  user User? @relation(fields: [guest_id], references: [user_id], onDelete: Cascade, onUpdate : Cascade)
  team Team? @relation(fields: [team_id], references: [team_id], onDelete: Cascade, onUpdate : Cascade)
  guest_role Role
  guest_id String?
  team_id String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Invitation_link {
  id String @id @default(cuid())
  token String?
  link String?
  isActive Boolean @default(true)
  activatedAt DateTime?
  invitation Member_invitation @relation(fields : [invitation_id], references: [id], onDelete: Cascade, onUpdate : Cascade)
  invitation_id String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
} 

model Invitation_info {
    id String @id @default(cuid())
    user User? @relation(fields: [inviter_id], references: [user_id], onDelete: Cascade, onUpdate : Cascade)
    invitation Member_invitation? @relation(fields: [invitation_info], references: [id], onDelete: Cascade, onUpdate : Cascade)
    invitation_info String
    inviter_id String
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
}

model Agent {
  agent_id String @id @default(cuid())
  name String @db.VarChar(255)
  description String @db.VarChar(500)
  status String @default("functioning")
  tasks Task[]
  channel Channel? @relation(fields: [channel_id], references: [channel_id], onDelete: Cascade, onUpdate : Cascade)
  creator User? @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate : Cascade)
  user_id String
  channel_id String 
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Channel {
  channel_id String @id @default(cuid())
  name String @db.VarChar(255)
  provider String
  provider_connected Boolean @default(false)
  description String @db.VarChar(500)
  owner User? @relation(fields: [owner_id], references: [user_id], onDelete: Cascade, onUpdate : Cascade)
  google_token Google_token? @relation(fields: [google_token_id], references: [id], onDelete: Cascade, onUpdate : Cascade)
  discord_token Discord_token? @relation(fields: [discord_token_id], references: [id], onDelete: Cascade, onUpdate : Cascade)
  team Team? @relation(fields: [team_id], references: [team_id], onDelete: Cascade, onUpdate : Cascade)
  agents Agent[]
  owner_id String?
  team_id String?
  google_token_id String? @unique
  discord_token_id String? @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Google_token {
  id String @id @default(cuid())
  access_token String @db.VarChar(255)
  refresh_token String @db.VarChar(255)
  channel Channel?
  scope String @db.VarChar(255)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Discord_token {
  id String @id @default(cuid())
  access_token String @db.VarChar(255)
  token_type String @db.VarChar(255)
  channel Channel?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Task {
  task_id String @id @default(cuid())
  name String @db.VarChar(255)
  priority Task_priority
  status String @default("functioning")
  agent Agent? @relation(fields: [agent_id], references: [agent_id], onDelete: Cascade, onUpdate : Cascade)
  recurrent Boolean?
  task_schedule Task_Schedule? @relation(fields : [schedule], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creator User? @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate : Cascade)
  user_id String
  agent_id String
  schedule String @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Task_Schedule {
  id String @id @default(cuid())
  task Task?
  timezone String
  day String 
  dayPeriod String
  hourAndMinute String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}