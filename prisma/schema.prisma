// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  team_id String @id @default(cuid())
  name String @db.VarChar(255)
  channel_connection Team_channel[]
  description String @db.VarChar(500)
  person User? @relation(fields: [user_id], references: [user_id] , onDelete: Cascade, onUpdate : Cascade)
  user_id String
  user_previlege User_privilege[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model User_privilege {
  id String @id @default(cuid())
  privilege String
  status String
  user User? @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate : Cascade)
  team Team? @relation(fields: [team_id], references: [team_id], onDelete: Cascade, onUpdate: Cascade)
  user_id String 
  team_id String 
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model User {
  user_id String @id @default(cuid())
  name String @db.VarChar(255)
  img String? @db.VarChar(255)
  email String @unique
  password String 
  teams Team[]
  channels Channel[]
  user_privilege User_privilege[]
  Stripe_sub Stripe_sub?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Team_channel {
  id String @id @default(cuid())
  team Team @relation(fields: [teamId], references: [team_id], onDelete: Cascade, onUpdate: Cascade)
  channel Channel @relation(fields: [channelId], references: [channel_id], onDelete: Cascade, onUpdate: Cascade)
  teamId String
  channelId String
}

model Stripe_sub {
  sub_id String @id @default(cuid())
  user User? @relation(fields: [user_id], references: [user_id] , onDelete: Cascade, onUpdate : Cascade)
  user_id String @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Agent {
  agent_id String @id @default(cuid())
  name String @db.VarChar(255)
  description String @db.VarChar(500)
  status String @default("functioning")
  tasks Task[]
  channel Channel? @relation(fields: [channel_id], references: [channel_id], onDelete: Cascade, onUpdate : Cascade)
  channel_id String 
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Channel {
  channel_id String @id @default(cuid())
  name String @db.VarChar(255)
  provider String
  provider_connected Boolean @default(false)
  description String @db.VarChar(500)
  Team_channel Team_channel[]
  owner User? @relation(fields: [owner_id], references: [user_id], onDelete: Cascade, onUpdate : Cascade)
  google_token Google_token? @relation(fields: [google_token_id], references: [id], onDelete: Cascade, onUpdate : Cascade)
  discord_token Discord_token? @relation(fields: [discord_token_id], references: [id], onDelete: Cascade, onUpdate : Cascade)
  agents Agent[]
  owner_id String?
  google_token_id String? @unique
  discord_token_id String? @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Google_token {
  id String @id @default(cuid())
  access_token String @db.VarChar(255)
  refresh_token String @db.VarChar(255)
  channel Channel?
  scope String @db.VarChar(255)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Discord_token {
  id String @id @default(cuid())
  access_token String @db.VarChar(255)
  token_type String @db.VarChar(255)
  channel Channel?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Task {
  task_id String @id @default(cuid())
  name String @db.VarChar(255)
  priority String @db.VarChar(500)
  status String @default("functioning")
  agent Agent? @relation(fields: [agent_id], references: [agent_id], onDelete: Cascade, onUpdate : Cascade)
  recurrent Boolean?
  task_schedule Task_Schedule? @relation(fields : [schedule], references: [id], onDelete: Cascade, onUpdate: Cascade)
  agent_id String
  schedule String @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Task_Schedule {
  id String @id @default(cuid())
  task Task?
  timezone String
  day String 
  dayPeriod String
  hourAndMinute String
}